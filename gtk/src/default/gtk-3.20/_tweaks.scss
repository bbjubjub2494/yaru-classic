$_base_hover_color: transparentize($fg_color, 0.85);
$_base_active_color: transparentize($fg_color, 0.75);
$_titlebutton_height: 24px;

@mixin draw_circle($c, $size:$_titlebutton_height) {
  $button_size: $size + 2px * 2;
  $circle_size: 20px / $button_size / 2;

  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, $circle_size,
                                  to($c),
                                  to(transparent));
}

@mixin undershoot($p) {
  //
  // undershoot
  //
  // $p: position
  //
  // possible $p values:
  // top, bottom, right, left
  //

  $_us_shadow_color: if($variant=='light', $silk, $jet);
  $_us_shadow_alpha: 0.8;

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;

  @if ($p == left) {
    box-shadow: inset 2px 0 0 transparentize($_us_shadow_color, $_us_shadow_alpha),
                inset 1px 0 0 transparentize(darken($_us_shadow_color, 20%), $_us_shadow_alpha);
  }
  @else if ($p == right) {
    box-shadow: inset -2px 0 0 transparentize($_us_shadow_color, $_us_shadow_alpha),
                inset -1px 0 0 transparentize(darken($_us_shadow_color, 20%), $_us_shadow_alpha);
  }
  @else if ($p == top) {
    box-shadow: inset 0 2px 0 0 transparentize($_us_shadow_color, $_us_shadow_alpha),
                inset 0 1px 0 0 transparentize(darken($_us_shadow_color, 20%), $_us_shadow_alpha);
  }
  @else if ($p == bottom) {
      box-shadow: inset 0 -2px 0 0 transparentize($_us_shadow_color, $_us_shadow_alpha),
                  inset 0 -1px 0 0 transparentize(darken($_us_shadow_color, 20%), $_us_shadow_alpha);
  }
}

// with a flatter headerbar and buttons, we dont need that heavy shadows, remove this when upstream agrees
headerbar *, button * {
  text-shadow: none;
  -gtk-icon-shadow: none;
}

// blue spinner
spinner {
  &:not(:backdrop) {
    color: $blue;
  }
}

// titlebutton
button.titlebutton:not(.appmenu) {

  &,
  &:hover,
  &:active {

    headerbar &,
    .titlebar &,
    headerbar.selection-mode & {

      // spec bump otherwise :backdrop  will still have a bg
      &,
      &:backdrop {
        @extend %undecorated_button;
      }
    }
  }

  // Important - otherwise the circle size is wrong
  min-height: $_titlebutton_height;
  min-width: $_titlebutton_height;
  padding: 2px;

  headerbar &,
  .titlebar &,
  headerbar.selection-mode &,
  & {
    &.maximize, &.minimize {

      &, &:backdrop {
        &:hover {
          @include draw_circle(if($ambiance==true, lighten($inkstone, 7%), $_base_hover_color));
        }

        &:active {
          @include draw_circle(if($ambiance==true, lighten($inkstone, 12%), $_base_active_color));
        }
      }
    }

    &.close {
      color: $selected_fg_color;
      @include draw_circle($selected_bg_color);

      &:hover {
        @include draw_circle($selected_bg_color);
        @include draw_circle(lighten($selected_bg_color, 5%));
      }

      &:active {
        @include draw_circle($selected_bg_color);
        @include draw_circle(darken($selected_bg_color, 5%));
      }

      &:backdrop {
        @include draw_circle(lighten($inkstone, if($variant=='light', if($ambiance==true, 15%, 40%), 10%)));
        &:hover { @include draw_circle(lighten($inkstone, if($variant=='light', if($ambiance==true, 20%, 45%), 15%))); }
      }
    }
  }
}

// we prefered our gray hover for menus and popovers, orange is a very strong color
menu,
.menu,
.context-menu {
  menuitem {

    &:hover {
      color: $fg_color;
      background-color: $popover_hover_color;
    }
  }
}

// We don't want menuitems to look like links, we should propose this upstream
menubar,
.menubar {
  > menuitem {
    &:hover {
      color: $fg_color;
      background-color: $popover_hover_color;
    }
  }
}

// We don't want the app notifications to look like OSD because they are interactive
.app-notification,
.app-notification.frame {
  padding: 10px;
  margin: 12px;
  color: $text_color;
  border-radius: $menu_radius;
  background: none;
  background-color: $menu_color;
  border: 1px solid $borders_color;
  box-shadow: 0 2px 5px transparentize(black, 0.8);
  text-shadow: none;

  button {
    &, &:dir(ltr), &:dir(rtl) {
      &.text-button, &.image-button, & {
        @include button(normal);
        &.flat { @include button(undecorated); }
        &:hover { @include button(hover); }
        &:active { @include button(active); }
        &:backdrop {
          @include button(backdrop);
          &.flat { @include button(undecorated); }
        }
        &:disabled { @include button(insensitive); }
      }
    }
  }

  &:backdrop {
    background-color: $backdrop_bg_color;
    color: $backdrop_text_color;
    box-shadow: none;
    transition: $backdrop_transition;
  }

  border { border: none; }
}

// Since "we" missed to intoduce a switch color for Adwaita, we now need to re-insert the switches in tweaks
// So it uses thew new switch color variables
// This really needs an upstream change to remove this code

/**********
 * Switch *
 **********/
 switch {
  outline-offset: -4px;

  // similar to the .scale
  border: 1px solid $borders_color;
  border-radius: 14px;
  color: $fg_color;
  background-color: $dark_fill;
  text-shadow: 0 1px transparentize(black, 0.9);
  font-size: 0; // fix for gtk 3.28 switches to not show the on/off label

  &:checked {
    color: $selected_fg_color;
    border-color: $switch_border_color;
    background-color: $switch_bg_color;
    text-shadow: 0 1px transparentize($switch_border_color, 0.5),
                 0 0 2px transparentize(white, 0.4);
  }

  &:disabled {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    text-shadow: none;
  }

  &:backdrop {
    color: $backdrop_fg_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    text-shadow: none;
    transition: $backdrop_transition;

    &:checked {
      @if $variant == 'light' { color: $backdrop_bg_color; }
      border-color: if($variant=='light', $switch_bg_color, $switch_border_color);
      background-color: $switch_bg_color;
    }

    &:disabled {
      color: $backdrop_insensitive_color;
      border-color: $backdrop_borders_color;
      background-color: $insensitive_bg_color;
    }
  }

  slider {
    margin: -1px;
    min-width: 24px;
    min-height: 24px;
    border: 1px solid;
    border-radius: 50%;
    transition: $button_transition;
    -gtk-outline-radius: 20px;

    @if $variant == 'light' {
      @include button(normal-alt, $edge: $shadow_color);
    }
    @else {
      @include button(normal-alt, $c: lighten($bg_color,6%), $edge: $shadow_color);
    }
  }

  image { color: transparent; } /* only show i / o for the accessible theme */

  &:hover slider {
    @if $variant == 'light' {
      @include button(hover-alt, $edge: $shadow_color);
    }
    @else {
      @include button(hover-alt, $c: lighten($bg_color,6%), $edge: $shadow_color);
    }
  }

  &:checked slider { border: 1px solid $switch_border_color; }

  &:disabled slider { @include button(insensitive); }

  &:backdrop {
    slider {
      transition: $backdrop_transition;

      @include button(backdrop);
    }

    &:checked slider { border-color: if($variant == 'light', $switch_bg_color, $switch_border_color); }

    &:disabled slider { @include button(backdrop-insensitive); }
  }

  row:selected:not(:disabled) & {
    @if $variant == 'light' {
      box-shadow: none;
      border-color: $selected_borders_color;

      &:backdrop { border-color: $selected_borders_color; }

      slider { &:checked { border-color: $switch_border_color; } }
    }
  }
}

// Focus "ring" - upstream is also interested in this, so better get this into upstream at some time
*:not(button) {
  outline-color: $focus_border_color;
  outline-style: solid;
  outline-offset: -2px;
  outline-width: 2px;
  -gtk-outline-radius: $button-radius;
}

button {
  outline-color: $focus_border_color;
  outline-style: solid;
  outline-offset: -1px;
  outline-width: 2px;
  -gtk-outline-radius: $button-radius;
}

switch slider {
  outline-color: $focus_border_color;
  outline-style: solid;
  outline-offset: -2px;
  outline-width: 2px;
  -gtk-outline-radius: 100%;
}

checkbutton,
radiobutton {
  outline-color: $focus_border_color;
  outline-offset: 1px;
  outline-width: 2px;
}

row {
  outline-color: $focus_border_color;
  outline-offset: -2px;

  &:selected {
    outline-color: $bg_color;
    outline-style: dashed;
    outline-width: 1px;
    -gtk-outline-radius: 1px;
  }
}

/*************
 * Notebooks *
 *************/
notebook {
  > header {
    padding: 1px;
    border-color: $borders_color;
    border-width: 1px;

    background: $bg_color;

    &:backdrop {
      border-color: $backdrop_borders_color;
      background-color: $backdrop_bg_color;
    }

    tabs { margin: -1px; }

    &.top {
      border-style: none none solid none;
      > tabs {
        margin-bottom: -2px;
        padding-top: 4px;
        > tab {
          border: 1px solid transparent;
          border-radius: 4px 4px 0 0;

          &:hover:not(:checked):not(:backdrop) {
            background-color: transparentize($base_color, 0.5);
            box-shadow: none;
            border-color: $borders_color;
          }

          &:backdrop {
            box-shadow: none;
          }

          &:checked {
            background-color: $base_color;
            border: 1px solid $borders_color;
            border-bottom-color: transparent;
            box-shadow: none;

            &:hover { background-color: $base_color; }
            &:backdrop { background-color: $backdrop_base_color; }
          }
        }
      }
    }

    &.bottom {
      border-style: solid none none none;
      > tabs {
        margin-top: -2px;
        padding-bottom: 4px;
        > tab {
          border: 1px solid transparent;
          border-radius: 0 0 4px 4px;

          &:hover:not(:checked):not(:backdrop) {
            background-color: transparentize($base_color, 0.5);
            box-shadow: none;
            border-color: $borders_color;
          }

          &:backdrop { box-shadow: none; }

          &:checked {
            background-color: $base_color;
            border: 1px solid $borders_color;
            border-top-color: transparent;
            box-shadow: none;

            &:hover { background-color: $base_color; }
            &:backdrop { background-color: $backdrop_base_color; }
          }
        }
      }
    }

    &.left {
      border-style: none solid none none;
      > tabs {
        margin-right: -2px;
        padding-left: 4px;
        > tab {
          border: 1px solid transparent;
          border-radius: 4px 0 0 4px;

          &:hover:not(:checked):not(:backdrop) {
            background-color: transparentize($base_color, 0.5);
            box-shadow: none;
            border-color: $borders_color;
          }

          &:backdrop { box-shadow: none; }

          &:checked {
            background-color: $base_color;
            border: 1px solid $borders_color;
            border-right-color: transparent;
            box-shadow: none;

            &:hover { background-color: $base_color; }
            &:backdrop { background-color: $backdrop_base_color; }
          }
        }
      }
    }

    &.right {
      border-style: none none none solid;
      > tabs {
        margin-left: -2px;
        padding-right: 4px;
        > tab {
          border: 1px solid transparent;
          border-radius: 0 4px 4px 0;

          &:hover:not(:checked):not(:backdrop) {
            background-color: transparentize($base_color, 0.5);
            box-shadow: none;
            border-color: $borders_color;
          }

          &:backdrop { box-shadow: none; }

          &:checked {
            background-color: $base_color;
            border: 1px solid $borders_color;
            border-left-color: transparent;
            box-shadow: none;

            &:hover { background-color: $base_color; }
            &:backdrop { background-color: $backdrop_base_color; }
          }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -5px;
      margin-right: -5px;
      padding-left: 4px;
      padding-right: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -5px;
      margin-bottom: -5px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic.flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    tab {
      min-height: 30px;
      min-width: 30px;
      padding: 3px 12px;

      outline-offset: -5px;

      color: $fg_color;
      font-weight: normal;

      border-width: 1px;         // for reorderable tabs
      border-color: transparent; //

      &:hover {
        color: $fg_color;

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.7);
          background-color: transparentize($bg_color, 0.8);
        }
      }

      &:backdrop {
        color: transparentize($backdrop_fg_color, 0.2);

        &.reorderable-page {
          border-color: transparent;
          background-color: transparent;
        }
      }

      &:checked {
        color: $fg_color;

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.5);
          background-color: transparentize($bg_color, 0.5);

          &:hover { background-color: transparentize($bg_color, 0.3); }
        }
      }

      &:backdrop:checked {
        color: $backdrop_fg_color;

        &.reorderable-page {
          border-color: $backdrop_borders_color;
          border-bottom-color: transparent;
          background-color: $backdrop_base_color;
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        &:hover { color: currentColor; }

        &, &:backdrop { color: gtkalpha(currentColor, 0.3); }

        padding: 0;
        margin-top: 4px;
        margin-bottom: 4px;
        // FIXME: generalize .small-button?
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 4px;
        padding-right: 4px;

        &:not(:only-child) {
          margin-left: 3px;
          margin-right: 3px;

          &:first-child { margin-left: -1px; }
          &:last-child { margin-right: -1px; }
        }

        tab {
          margin-left: 4px;
          margin-right: 4px;

          &.reorderable-page { border-style: solid solid; }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 4px;
        padding-bottom: 4px;

        &:not(:only-child) {
          margin-top: 3px;
          margin-bottom: 3px;

          &:first-child { margin-top: -1px; }
          &:last-child { margin-bottom: -1px; }
        }

        tab {
          margin-top: 4px;
          margin-bottom: 4px;

          &.reorderable-page { border-style: solid solid; }
        }
      }
    }

    &.top tab { padding-bottom: 4px; }
    &.bottom tab { padding-top: 4px; }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;

    &:backdrop { background-color: $backdrop_base_color; }
  }
}

scrolledwindow {
  undershoot {
    &.top { @include undershoot(top); }

    &.bottom { @include undershoot(bottom); }

    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }
}

/************
 * checkbox *
 ************/
check,
radio {
  menu menuitem & {
    &, &:checked, &:indeterminate {
      &, &:hover, &:disabled {
        border-color: transparent;
      }
    }
  }
}

.sidebar {
  background-color: $bg_color;
}

/************
 * Treeview *
 ************/

treeview:hover { background: $popover_hover_color; }

// Fix for slimed down circular buttons, could need a change upstream since this happens for
// Some of the circular buttons too there
* { & button.circular { min-width: 0; } }

