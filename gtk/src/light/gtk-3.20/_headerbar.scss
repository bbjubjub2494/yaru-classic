@import 'ubuntu-colors';

$small_radius: 4px;

@mixin yaru_headerbar_fill($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
    //
    // headerbar fill
    //
    // $c:  base color
    // $hc: top highlight color
    // $ov: a background layer for background shorthand (hence no commas!)
    //
    $gradient: linear-gradient(to top, darken($c, 2%), lighten($c, 1%));

    //@if $variant == 'dark' { $gradient: linear-gradient(to top, lighten($c, 4%), lighten($c, 6%)); }

    @if $ov !=none {
        background: $c $ov, $gradient;
    }

    @else {
        background: $c $gradient;
    }

    box-shadow: inset 0 1px $hc; // top highlight
}

@mixin draw_circle($c, $close:false, $size:24px) {
    $button_size: $size + 2px * 2;
    $circle_size: 20px / $button_size / 2;

    background-image: -gtk-gradient(radial,
        center center, 0,
        center center, $circle_size,
        to($c),
        to(transparent));

    &:hover {
        $_bg: if(lightness($c)<35%, lighten($c, 10%), lighten($c, 5%));
        background-image: -gtk-gradient(radial,
            center center, 0,
            center center, $circle_size,
            to($_bg),
            to(transparent));

        &:backdrop {
            $_bg: lighten($backdrop_headerbar_bg_color, 8%);
            background-image: -gtk-gradient(radial,
                center center, 0,
                center center, $circle_size,
                to($_bg),
                to(transparent));
        }
    }

    &:active {
        $_bg: if(lightness($c)<35%, darken($c, 8%), darken($c, 7%));
        background-image: -gtk-gradient(radial,
            center center, 0,
            center center, $circle_size,
            to($_bg),
            to(transparent));
    }

    @if $close==true {
        &:backdrop {
            color: $backdrop_headerbar_fg_color;
        }
    }
}

headerbar,
.titlebar {
    @include yaru_headerbar_fill($headerbar_bg_color);
    color: $headerbar_fg_color;

    &,
    & label,
    &>image {

        &,
        &.title {
            color: $headerbar_fg_color;
        }
    }

    border-color: darken($inkstone, 11%);

    box-shadow: inset 0 1px $headerbar_border_color;

    &:backdrop {
        border-color: mix(darken($inkstone, 11%), darken($inkstone, 1%), 80%);
        background-color: $backdrop_headerbar_bg_color;
        box-shadow: inset 0 1px $headerbar_border_color;
    }

    .maximized &,
    .fullscreen & {
        box-shadow: none;
    }

    button,
    button.image-button,
    button.text.button,
    button.toggle,
    box button.toggle,
    buttonbox.toggle {
        @include button(normal, $headerbar_bg_color, $headerbar_fg_color);

        &:hover {
            @include button(hover, $headerbar_bg_color, $headerbar_fg_color);
        }

        &:active,
        &:checked,
        &.toggle:checked,
        &.toggle:active {
            @include button(active, $headerbar_bg_color, $headerbar_fg_color);
        }

        &:backdrop {

            &.flat,
            & {
                @include button(backdrop, $headerbar_bg_color, $headerbar_fg_color);

                -gtk-icon-effect: none;
                border-color: $headerbar_border_color;

                &:active,
                &:checked {
                    @include button(backdrop-active, $headerbar_bg_color, $headerbar_fg_color);

                    border-color: $headerbar_border_color;
                }

                &:disabled {
                    @include button(backdrop-insensitive, if($variant=='light', darken($headerbar_bg_color, 15%), $headerbar_bg_color), $headerbar_fg_color);

                    border-color: $headerbar_border_color;

                    &:active,
                    &:checked {
                        @include button(backdrop-insensitive-active, darken($headerbar_bg_color, 15%), $headerbar_fg_color);

                        border-color: $headerbar_border_color;
                    }
                }
            }
        }

        &.flat {

            &:backdrop,
            &:disabled,
            &:backdrop:disabled {
                @include button(undecorated);
            }
        }

        &:disabled {
            @include button(insensitive, if($variant=='light', darken($headerbar_bg_color, 15%), $headerbar_bg_color), $headerbar_fg_color);

            &:active,
            &:checked {
                @include button(insensitive-active, $headerbar_bg_color, $headerbar_fg_color);
            }
        }
    }

    separator {
        background: image(darken(#3d3d3d, 11%));
    }

    switch:checked {
        border-color: $suggested_bg_color;
    }
}

// Window Close button
button.titlebutton {
    $c: $headerbar_bg_color;
    $tc: $headerbar_fg_color;

    &,
    &:hover,
    &:active {

        headerbar &,
        .titlebar &,
        & {

            // spec bump otherwise :backdrop  will still have a bg
            &,
            &:backdrop {
                @extend %undecorated_button;
            }
        }
    }

    border-radius: $small_radius;
    min-height: 24px;
    min-width: 24px;
    padding: 2px;

    &:not(.close):not(.appmenu) {
        &:hover {
            @include draw_circle($c);
        }

        &:active {
            @include draw_circle($c);
        }
    }

    &.close {
        @include draw_circle($selected_bg_color, $close: true);

        &:hover {
            @include draw_circle($selected_bg_color, $close: true);
        }

        &:active {
            @include draw_circle($selected_bg_color, $close: true);
        }
    }
}